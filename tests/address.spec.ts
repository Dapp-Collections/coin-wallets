import * as BCH from '../src/chains/bch';
import * as BSV from '../src/chains/bsv';
import * as BTC from '../src/chains/btc';
import * as EOS from '../src/chains/eos';
import * as ETH from '../src/chains/eth';

// generated by https://iancoleman.io/bip39/
const mnemonic =
  'boil rich approve sustain joke repeat wait loud split runway mix pepper shield click tackle';

test('BCH Address', async () => {
  const { legacyAddress, cashAddress } = BCH.getAddressFromMnemonic(mnemonic);

  expect(legacyAddress).toBe('1M25cmoQiGpELPt5RUZ57T8nssamXjyKcS');
  expect(cashAddress).toBe('bitcoincash:qrdedjghe024u35fnmmkce530m0hqudvz5r26g5dg5');
});

test('BSV Address', async () => {
  const address1 = BSV.getAddressFromMnemonic(mnemonic).address;
  const address2 = BTC.getAddressFromMnemonic(mnemonic, 'BSV').address;

  expect(address1).toBe('17yXVM53qsHdVUzaa47x2W7Ehz4Jurw9gw');
  expect(address2).toBe(address1);
});

test('BTC Address', async () => {
  const { address } = BTC.getAddressFromMnemonic(mnemonic);

  expect(address).toBe('1o7bH86mLUfcf5nNiMerZzfJnU47aYUQK');
});

test('EOS PublicKey', async () => {
  const { publicKey, privateKey } = EOS.getAddressFromMnemonic(mnemonic);

  expect(publicKey).toBe('EOS7ywNiyf59aCRt7uDhRRw23F8ZJzDPLrqsDkB4oaXJCPcKDu3cx');
  expect(privateKey).toBe('5Ju73P5m4Trczbkv2pEykiCoYn3qP36BuuuuDt8zL4skn2zTNci');
});

test('ETH Address', async () => {
  const { address } = ETH.getAddressFromMnemonic(mnemonic);

  expect(address).toBe('0xdbc47CC91b309eb5429bD376B98fDEc815f65986');
});
